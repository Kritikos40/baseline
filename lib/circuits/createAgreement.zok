import "utils/pack/u32/nonStrictUnpack256" as unpack256
import "utils/pack/u32/unpack128" as unpack128
import "hashes/sha256/512bitPacked" as packed512Sha
import "ecc/edwardsCompress" as edwardsCompress
import "hashes/sha256/1024bit" as shaOf1024Bits
import "utils/casts/bool_256_to_u32_8" as bool_256_to_u32_8
import "signatures/verifyEddsa" as verifyEddsa
import "ecc/babyjubjubParams" as context

struct Signature {
  field[2] R
  field S
}

struct Commitment {
  field[2] value
  field[2] salt
}

struct Metadata {
  field[2] senderPublicKey
  field agreementName
  field agreementUrl
}

struct Agreement {
  Commitment agreementCommitment
}

def convert(field[2] input) -> u32[8]:
  u32[4] lsbBits = unpack128(input[0])
  u32[4] msbBits = unpack128(input[1])
  return [...msbBits, ...lsbBits]

def main(field publicInputHash, private Commitment inputCommitment, private Metadata inputMetadata, private Signature inputSignature) -> bool:
  u32[8] publicInputHashBits = unpack256(publicInputHash)

  // hash of the below private inputs must be equal to public input
  // Convert inputs to u32
  u32[8] saltBits = convert(inputCommitment.salt)
  u32[8] valueBits = convert(inputCommitment.value)
  bool[256] compressedSenderPubKey = edwardsCompress(inputMetadata.senderPublicKey)
  u32[8] pubKeyBits = bool_256_to_u32_8(compressedSenderPubKey)
  u32[8] nameBits = unpack256(inputMetadata.agreementName)
  u32[8] urlBits = unpack256(inputMetadata.agreementUrl)

  // compute hash
  u32[8] agreementHash = shaOf1024Bits(saltBits, pubKeyBits, nameBits, urlBits)

  // verify signature
  // u32[2][8] message = [agreementHash; 2]
  bool verified = verifyEddsa(inputSignature.R, inputSignature.S, inputMetadata.senderPublicKey, agreementHash, agreementHash, context())

  // Check: Compare final hash to public input hash; Compare input; and verify signature
  bool out = publicInputHashBits == agreementHash && valueBits == agreementHash && verified == true
  // To consider:
  // - Formalize agreement struct based on baselineagreement.zok
  // - Pending issue to be resolved: struct within struct unwrapping
  // - Merkle root check
  return out
